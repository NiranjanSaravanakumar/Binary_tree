#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

// Definition of a binary tree node
typedef struct TreeNode {
    int value;
    struct TreeNode *left;
    struct TreeNode *right;
} TreeNode;

// Function to create a new tree node
TreeNode* createNode(int value) {
    TreeNode *newNode = (TreeNode*)malloc(sizeof(TreeNode));
    newNode->value = value;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to find the minimum value in the binary tree
int findMin(TreeNode *root) {
    if (root == NULL) {
        return INT_MAX; // Return a large number if the tree is empty
    }
    int minValue = root->value;
    int leftMin = findMin(root->left);
    int rightMin = findMin(root->right);
    if (leftMin < minValue) minValue = leftMin;
    if (rightMin < minValue) minValue = rightMin;
    return minValue;
}

// Function to find the maximum value in the binary tree
int findMax(TreeNode *root) {
    if (root == NULL) {
        return INT_MIN; // Return a small number if the tree is empty
    }
    int maxValue = root->value;
    int leftMax = findMax(root->left);
    int rightMax = findMax(root->right);
    if (leftMax > maxValue) maxValue = leftMax;
    if (rightMax > maxValue) maxValue = rightMax;
    return maxValue;
}

int main() {
    // Creating a binary tree manually
    TreeNode *root = createNode(4);
    root->left = createNode(2);
    root->right = createNode(6);
    root->left->left = createNode(1);
    root->left->right = createNode(3);
    root->right->left = createNode(5);
    root->right->right = createNode(7);

    // Find minimum and maximum values
    int minValue = findMin(root);
    int maxValue = findMax(root);

    // Print the results
    printf("Minimum value in the binary tree: %d\n", minValue);
    printf("Maximum value in the binary tree: %d\n", maxValue);

    // Free allocated memory (not shown here for simplicity)
    return 0;
}
